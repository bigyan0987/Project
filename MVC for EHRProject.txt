
------------------View---------------------

@{
    ViewBag.Title = "AddNepali";
}

@model newBillingProject.Models.NepaliModel
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Add Employee</h4>
        <div>
            @Html.ActionLink("Headed to Full List", "../help.aspx")
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.userId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.middleName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.middleName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.middleName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.postalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.postalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.postalCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.country, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.countryCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.countryCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.countryCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birthdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.birthdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.birthdate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10" style="color:green">
                @ViewBag.Message

            </div>
        </div>
    </div>

}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>




--------------------model--------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;

namespace newBillingProject.Models
{
    public class NepaliModel 
    {
        public int userId { get; set; }

        [Required(ErrorMessage = "First Name is Required.")]
        public string firstName { get; set; }

        public string middleName { get; set; }

        [Required(ErrorMessage ="Last Name is Required.")]
        public string lastName { get; set; }

        [Required(ErrorMessage ="Address is Required.")]
        public string address { get; set; }

        [Required(ErrorMessage ="Please Enter City.")]
        public string city { get; set; }

        [Required(ErrorMessage ="Enter you State.")]
        public string state { get; set; }

        [Required(ErrorMessage ="Enter your Zip Code.")]
        public int postalCode { get; set; }

        [Required(ErrorMessage ="Choose your Country.")]
        public string country { get; set; }

        [Required(ErrorMessage ="Select your Country Code.")]
        public string countryCode { get; set; }

        [Required(ErrorMessage ="Enter your Number.")]
        public int number { get; set; }

        [Required(ErrorMessage = "Required")]
        [StringLength(50, ErrorMessage = "Max 50 characters")]
      //  [RegularExpression(@"\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b")]
        public string email { get; set; }
        [Required(ErrorMessage ="Choose your Birth Date.")]
        public DateTime birthdate { get; set; }


    }
}


--------------------------------controller------------------------
using newBillingProject.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace newBillingProject.Controllers
{
    public class NepaliController : Controller
    {

        private SqlConnection con;
        //To Handle connection related activities
        private void connection()
        {

                con = new SqlConnection("data source=.; database=EHRProject; integrated security=SSPI"); 
            }
        // GET: Nepali/AddNepali    
        public ActionResult AddNepali()
        {
            return View();
        }

        // POST: Employee/AddEmployee    
        [HttpPost]
        public ActionResult AddUser(RegularExpressionAttribute usr)
        {

                    if (AddUsers(usr))
                    {
                        ViewBag.Message = "User details added successfully";
                    }
                return View();
        }

        //To Add Nepali details
        public bool AddUsers(RegularExpressionAttribute obj)
        {

            connection();
            SqlCommand com = new SqlCommand("Procedure", con);
            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@userId", obj.userId);
            com.Parameters.AddWithValue("@firstName", obj.firstName);
            com.Parameters.AddWithValue("@lastName", obj.lastName);
            com.Parameters.AddWithValue("@address", obj.address);
            com.Parameters.AddWithValue("@city", obj.city);
            com.Parameters.AddWithValue("@state", obj.state);
            com.Parameters.AddWithValue("@postleCode", obj.postalCode);
            com.Parameters.AddWithValue("@country", obj.country);
            com.Parameters.AddWithValue("@countryCode", obj.countryCode);
            com.Parameters.AddWithValue("@number", obj.number);
            com.Parameters.AddWithValue("@email", obj.email);
            com.Parameters.AddWithValue("@birthDate", obj.birthdate);
            con.Open();
            int i = com.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

